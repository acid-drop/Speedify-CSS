<?php
 namespace UCSS; use WP_REST_Server; class RestApi { public static function init() { add_action('rest_api_init', array(__CLASS__, 'register_rest_apis')); } public static function register_rest_apis() { register_rest_route( 'unused-css', '/update_css/?', array( 'methods' => 'POST', 'callback' => array(__CLASS__, 'update_css'), 'permission_callback' => '__return_true', ) ); if (!Auth::is_allowed()) { return; } $get_data_functions = array('dashboard','css'); foreach ($get_data_functions as $data_type) { register_rest_route( 'unused-css', '/get_' . $data_type . '_data/?', array( 'methods' => array('GET', 'POST'), 'callback' => array(__CLASS__, 'get_' . $data_type . '_data'), 'permission_callback' => '__return_true', ) ); } register_rest_route( 'unused-css', '/update_config/?', array( 'methods' => 'POST', 'callback' => array(__CLASS__, 'update_config'), 'permission_callback' => '__return_true', ) ); register_rest_route( 'unused-css', '/clear_css_cache/?', array( 'methods' => array('GET'), 'callback' => array(__CLASS__, 'clear_css_cache'), 'permission_callback' => '__return_true', ) ); } public static function update_config($request) { $config = $request->get_json_params(); $config = self::transform_btoa($config); App\Config::update_config($config); } public static function get_dashboard_data() { $data = App\Dashboard::get_data(); return $data; } public static function get_css_data() { $data['cache_data'] = Speed\CSS::get_cache_data(); $data['stats_data'] = Speed\CSS::get_stats_data(); return $data; } public static function clear_css_cache() { $data = Speed\CSS::clear_cache(); return $data; } public static function update_css($request) { $json = $request->get_json_params(); $compressedData = base64_decode($json['compressedData']); $uncompressedData = gzdecode($compressedData); $json = json_decode($uncompressedData, true); if ($json === null && json_last_error() !== JSON_ERROR_NONE) { $errorMsg = json_last_error_msg(); die(json_encode(['error' => $errorMsg])); } Speed\CSS::process_css($json['css'], $json['url'], $json['post_id'], $json['post_types']); echo json_encode(['reduction' => number_format( $json['reduction'], 2)]); die(); } public static function transform_btoa($formDataJson) { foreach ($formDataJson as $key => $value) { if (is_string($value) && self::is_base64($value)) { $decodedValue = base64_decode($value, true); if ($decodedValue !== false && self::is_valid_decoded_string($decodedValue)) { $formDataJson[$key] = $decodedValue; } } else if (is_array($value)) { $formDataJson[$key] = self::transform_btoa($value); } } return $formDataJson; } private static function is_base64($string) { return (bool) preg_match('/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/', $string); } private static function is_valid_decoded_string($string) { return mb_check_encoding($string, 'UTF-8') || mb_check_encoding($string, 'ASCII'); } }