<?php
 namespace UCSS\App; class Config { public static $config; protected static $initial_config = array( 'speed_css' => array( 'css_mode' => array( 'name' => 'Unused CSS mode (enable, stats, disabled)', 'helper' => 'Whether or not the unused CSS functionality is enabled', 'type' => 'radio', 'value' => 'preview', ), 'include_patterns' => array( 'name' => 'Include Patterns', 'helper' => 'Selectors in CSS files that match these patterns will always be included. Separate multiple with new lines', 'value' => '', ), ), ); public static function init() { self::$config = (array)get_option( 'ucss_namespace_CONFIG', array() ); self::$config = self::array_merge_recursive_unique( self::$initial_config, self::$config ); } public static function array_merge_recursive_unique(array $array1, array $array2) { $merged = $array1; foreach ($array2 as $key => $value) { if (is_array($value) && isset($merged[$key]) && is_array($merged[$key])) { $merged[$key] = self::array_merge_recursive_unique($merged[$key], $value); } elseif (is_array($value)) { $merged[$key] = self::array_merge_recursive_unique([], $value); } else { if (!in_array($value, $merged, true)) { $merged[$key] = $value; } } } return $merged; } public static function remove_non_global( $config ) { $array = $config; foreach ($array as $key => $value) { foreach($value AS $subkey=>$subvalue) { if (is_array($subvalue) && isset($subvalue['global']) && $subvalue['global'] === false) { unset($array[$key][$subkey]); } } } return $array; } public static function get( $parent, $passed_key ) { $config = self::$config; if ( isset( $config[ $parent ] ) ) { if ( isset( $config[ $parent ][ $passed_key ] ) ) { return $config[ $parent ][ $passed_key ] ['value']; } } else { return false; } } public static function update_config( $new_config = array() ) { if ( isset( $new_config['config_key'] ) ) { $config_key = $new_config['config_key']; $frame = self::$config[ $config_key ]; foreach ( $frame as $key_to_update=> $value ) { if ( isset( $new_config[ $key_to_update ] ) ) { $value_to_update = $value['value']; $frame[ $key_to_update ]['value'] = $new_config[ $key_to_update ]; } } self::$config[ $config_key ] = $frame; } update_option( 'ucss_namespace_CONFIG', self::$config, false ); } } 